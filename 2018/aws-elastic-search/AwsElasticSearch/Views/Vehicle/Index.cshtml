<div class="row">
    <div class="row">
        <h4>Database</h4>
    </div>
    <div class="row">
        <pre>
        SELECT *
        FROM tbl_Something
        WHERE Active = 1
        </pre>
    </div>
    <div id="database-table">
        <table class="table">
            <thead>
            <tr>
                <th scope="col" v-for="col in columns" v-on:click="sortTable(col)">
                    {{col}}
                    <div class="arrow"
                         v-if="col == sortColumn"
                         v-bind:class="[ascending ? 'arrow_up' : 'arrow_down']">
                    </div>
                </th>
            </tr>
            </thead>
            <tbody>
            <tr v-for="row in get_rows()">
                <td v-for="col in columns">{{row[col]}}</td>
            </tr>
            </tbody>
        </table>
        <div class="row">
            <div v-for="i in num_pages()"
                 v-bind:class="[i == currentPage ? 'active' : '']"
                 v-on:click="change_page(i)">
                {{i}}
            </div>
        </div>
    </div>
    <script>
        var sixthTable = new Vue({
            el: '#database-first-table',
            data: {
                currentPage: 1,
                elementsPerPage: 3,
                ascending: false,
                sortColumn: '',
                rows: [
                    { id: 1, name: "Chandler Bing", phone: '305-917-1301', profession: 'IT Manager' },
                    { id: 2, name: "Ross Geller", phone: '210-684-8953', profession: 'Paleontologist' },
                    { id: 3, name: "Rachel Green", phone: '765-338-0312', profession: 'Waitress'},
                    { id: 4, name: "Monica Geller", phone: '714-541-3336', profession: 'Head Chef' },
                    { id: 5, name: "Joey Tribbiani", phone: '972-297-6037', profession: 'Actor' },
                    { id: 6, name: "Phoebe Buffay", phone: '760-318-8376', profession: 'Masseuse' }
                ]
            },
            methods: {
                "sortTable": function sortTable(col) {
                    if (this.sortColumn === col) {
                        this.ascending = !this.ascending;
                    } else {
                        this.ascending = true;
                        this.sortColumn = col;
                    }

                    var ascending = this.ascending;

                    this.rows.sort(function(a, b) {
                        if (a[col] > b[col]) {
                            return ascending ? 1 : -1
                        } else if (a[col] < b[col]) {
                            return ascending ? -1 : 1
                        }
                        return 0;
                    })
                },
                "num_pages": function num_pages() {
                    return Math.ceil(this.rows.length / this.elementsPerPage);
                },
                "get_rows": function get_rows() {
                    var start = (this.currentPage-1) * this.elementsPerPage;
                    var end = start + this.elementsPerPage;
                    return this.rows.slice(start, end);
                },
                "change_page": function change_page(page) {
                    this.currentPage = page;
                }
            },
            computed: {
                "columns": function columns() {
                    if (this.rows.length == 0) {
                        return [];
                    }
                    return Object.keys(this.rows[0])
                }
            }
        });
    </script>
</div>
