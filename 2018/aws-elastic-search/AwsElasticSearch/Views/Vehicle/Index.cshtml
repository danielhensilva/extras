<div class="row">
    <div class="col-12">
        <h4>Database</h4>
    </div>
    <div class="col-12">
        <pre>
SELECT *
FROM tbl_Something
WHERE Active = 1
            </pre>
    </div>
    <div class="col-12">
        <div id="database-table">
            <table class="table">
                <thead>
                <tr>
                    <th scope="col" v-for="col in columns" v-on:click="sortByColumn(col)" class="mouse-pointer text-uppercase">
                        {{col}}
                        <div class="arrow"
                             v-if="col == sorting.columnName"
                             v-bind:class="[sorting.ascending ? 'asc' : 'dsc']">
                        </div>
                    </th>
                </tr>
                </thead>
                <tbody>
                <tr v-for="row in rows">
                    <td v-for="col in columns" v-bind:scope="col == 'id' ? 'row' : null">{{row[col]}}</td>
                </tr>
                </tbody>
            </table>
            <caption>
                <button
                    class="btn btn-light m-1"
                    v-for="i in count"
                    v-bind:class="[i == pagination.currentPage ? 'active' : '']"
                    v-on:click="changePage(i)">
                    {{i}}
                </button>
            </caption>
        </div>
    </div>
    <script>
        new Vue({
            el: '#database-table',
            data: {
                pagination: {
                    currentPage: 1,
                    pageSize: 5
                },
                sorting: {
                    ascending: true,
                    columnName: 'id'
                },
                rows: [],
                count: 0
            },
            mounted: function() {
                this.syncServer();
            },
            methods: {
                syncServer: function() {
                    var url = [
                        '/api/database/vehicles?',
                        'page=', this.pagination.currentPage,
                        '&size=', this.pagination.pageSize,
                        '&column=', this.sorting.columnName,
                        '&orientation=', this.sorting.ascending ? 'asc' : 'desc'
                    ].join('');
                    this.$http.get(url).then(response => {
                        this.rows = response.body.pageRows;
                        this.count = response.body.totalPages;
                    });
                },
                sortByColumn: function(columName) {
                    if (this.sorting.columnName === columName) {
                        this.sorting.ascending = !this.sorting.ascending;
                    } else {
                        this.sorting.columnName = columName;
                        this.sorting.ascending = true;
                    }
                    this.syncServer();
                },
                changePage: function(page) {
                    this.pagination.currentPage = page;
                    this.syncServer();
                }
            },
            computed: {
                columns: function() {
                    if (this.rows.length === 0) {
                        return [];
                    }
                    var firstRow = this.rows[0];
                    var columns = Object.keys(firstRow);
                    return columns;
                }
            }
        });
    </script>
</div>